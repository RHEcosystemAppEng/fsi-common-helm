replicaCount: 1

image:
  repository: provectuslabs/kafka-ui
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
domain: fo-sut.pintc010042040201050a001.sut.azr.fusionoperate.io
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

auth:
#set to false in order to disable the authentication proxy side car
  enabled: true
#select the target address where to be redirected after authentication must contain protocol name (http/https) in case its not a domain name it ust include port number
  upstream: 'http://{{ include "kafka-ui.fullname" . }}:80'
#set as true if you need to use email domain authentication
  useEmailDomain: true
#select the mail domain to be allowed for authentication
  emailDomain: dh.com
#set true if you need to use role based authentication
  useSar: false
#select the resource where access is needed for a user to it in order to be able to bypass the proxy
#  "namespace":"app-dev","resource":"services","name":"proxy","verb":"get"}
  resource:
    namespace: "fo-kafka-perf"
    kind: "services"
    name: kafka-ui-proxy
    verb: get
#select cookie secret name must be 16 bytes or 24 or 32
  cookieSecretName: SECRET1234567890123455
#cookie saving refresh rate in seconds
  cookieRefreshSec: 20
#number of replicas for the deployment
  replicas: 1
#list of labels to add to all resources e.g:
  # labels:
  #   - 'someLabelName: someLabelValue'
  #   - 'someOtherLabelName: someOtherLabelValue'
  labels:
    - 'app: proxy'
kafka:
  # zkcertsLocation: /etc/kafka/certs
  # zkcertsSecret: my-zk-secret
  # zktruststoreItem: truststore.p12
  # zkkeystoreItem: keystore.p12
  truststoreFileLocation: /etc/kafka/truststore
  keystoreFileLocation: /etc/kafka/keystore
  truststoreSecret: sut-kafka-cluster-ca-cert
  keystoreSecret: schema-registry-user-rhsrr
  truststoreItem: ca.p12
  keystoreItem: user.p12

  
existingConfigMap: ""
existingSecret: ""
envs:
  config: 
    KAFKA_CLUSTERS_0_NAME: "sut-kafka"
    KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'https://sut-kafka-external-bootstrap-fo-kafka-perf.fo-sut.pintc010042040201050a001.sut.azr.fusionoperate.io:443'
    KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SSL
    KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_LOCATION: "/etc/kafka/keystore/user.p12"
    KAFKA_CLUSTERS_0_PROPERTIES_SSL_KEYSTORE_PASSWORD: "f7EcUT8RMQ8Y"
    KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: "/etc/kafka/truststore/ca.p12"
    KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: "eVmsiFeaRsSR"
  secret: {}
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # if you want to force a specific nodePort. Must be use with service.type=NodePort
  # nodePort:

# Ingress configuration
ingress:
  # Enable ingress resource
  enabled: false

  # Annotations for the Ingress
  annotations: {}

  # The path for the Ingress
  path: ""

  # The hostname for the Ingress
  host: ""

  # configs for Ingress TLS
  tls:
    # Enable TLS termination for the Ingress
    enabled: false
    # the name of a pre-created Secret containing a TLS private key and certificate
    secretName: ""

  # HTTP paths to add to the Ingress before the default path
  precedingPaths: []

  # Http paths to add to the Ingress after the default path
  succeedingPaths: []

resources: 
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
